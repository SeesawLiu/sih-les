//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1008.
// 
#pragma warning disable 1591

namespace com.Sconit.Service.BatchJob.OrderService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OrderServiceSoap", Namespace="http://com.Sconit.WebService.OrderService/")]
    public partial class OrderService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AutoCloseOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutoCloseASNOperationCompleted;
        
        private System.Threading.SendOrPostCallback OutCabOperationCompleted;
        
        private System.Threading.SendOrPostCallback TansferCabOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelReportOrderOpOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackFlushVanOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunLeanEngineOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutoGenAnDonOrderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OrderService() {
            this.Url = global::com.Sconit.Service.BatchJob.Properties.Settings.Default.com_Sconit_Service_BatchJob_OrderService_OrderService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AutoCloseOrderCompletedEventHandler AutoCloseOrderCompleted;
        
        /// <remarks/>
        public event AutoCloseASNCompletedEventHandler AutoCloseASNCompleted;
        
        /// <remarks/>
        public event OutCabCompletedEventHandler OutCabCompleted;
        
        /// <remarks/>
        public event TansferCabCompletedEventHandler TansferCabCompleted;
        
        /// <remarks/>
        public event CancelReportOrderOpCompletedEventHandler CancelReportOrderOpCompleted;
        
        /// <remarks/>
        public event BackFlushVanOrderCompletedEventHandler BackFlushVanOrderCompleted;
        
        /// <remarks/>
        public event RunLeanEngineCompletedEventHandler RunLeanEngineCompleted;
        
        /// <remarks/>
        public event AutoGenAnDonOrderCompletedEventHandler AutoGenAnDonOrderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/AutoCloseOrder", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AutoCloseOrder(string userCode) {
            this.Invoke("AutoCloseOrder", new object[] {
                        userCode});
        }
        
        /// <remarks/>
        public void AutoCloseOrderAsync(string userCode) {
            this.AutoCloseOrderAsync(userCode, null);
        }
        
        /// <remarks/>
        public void AutoCloseOrderAsync(string userCode, object userState) {
            if ((this.AutoCloseOrderOperationCompleted == null)) {
                this.AutoCloseOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutoCloseOrderOperationCompleted);
            }
            this.InvokeAsync("AutoCloseOrder", new object[] {
                        userCode}, this.AutoCloseOrderOperationCompleted, userState);
        }
        
        private void OnAutoCloseOrderOperationCompleted(object arg) {
            if ((this.AutoCloseOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutoCloseOrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/AutoCloseASN", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AutoCloseASN(string userCode, System.DateTime dateTime) {
            this.Invoke("AutoCloseASN", new object[] {
                        userCode,
                        dateTime});
        }
        
        /// <remarks/>
        public void AutoCloseASNAsync(string userCode, System.DateTime dateTime) {
            this.AutoCloseASNAsync(userCode, dateTime, null);
        }
        
        /// <remarks/>
        public void AutoCloseASNAsync(string userCode, System.DateTime dateTime, object userState) {
            if ((this.AutoCloseASNOperationCompleted == null)) {
                this.AutoCloseASNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutoCloseASNOperationCompleted);
            }
            this.InvokeAsync("AutoCloseASN", new object[] {
                        userCode,
                        dateTime}, this.AutoCloseASNOperationCompleted, userState);
        }
        
        private void OnAutoCloseASNOperationCompleted(object arg) {
            if ((this.AutoCloseASNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutoCloseASNCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/OutCab", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OutCab(string orderNo, string userCode) {
            this.Invoke("OutCab", new object[] {
                        orderNo,
                        userCode});
        }
        
        /// <remarks/>
        public void OutCabAsync(string orderNo, string userCode) {
            this.OutCabAsync(orderNo, userCode, null);
        }
        
        /// <remarks/>
        public void OutCabAsync(string orderNo, string userCode, object userState) {
            if ((this.OutCabOperationCompleted == null)) {
                this.OutCabOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOutCabOperationCompleted);
            }
            this.InvokeAsync("OutCab", new object[] {
                        orderNo,
                        userCode}, this.OutCabOperationCompleted, userState);
        }
        
        private void OnOutCabOperationCompleted(object arg) {
            if ((this.OutCabCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OutCabCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/TansferCab", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TansferCab(string orderNo, string flowCode, string qualityBarcode, string userCode) {
            this.Invoke("TansferCab", new object[] {
                        orderNo,
                        flowCode,
                        qualityBarcode,
                        userCode});
        }
        
        /// <remarks/>
        public void TansferCabAsync(string orderNo, string flowCode, string qualityBarcode, string userCode) {
            this.TansferCabAsync(orderNo, flowCode, qualityBarcode, userCode, null);
        }
        
        /// <remarks/>
        public void TansferCabAsync(string orderNo, string flowCode, string qualityBarcode, string userCode, object userState) {
            if ((this.TansferCabOperationCompleted == null)) {
                this.TansferCabOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTansferCabOperationCompleted);
            }
            this.InvokeAsync("TansferCab", new object[] {
                        orderNo,
                        flowCode,
                        qualityBarcode,
                        userCode}, this.TansferCabOperationCompleted, userState);
        }
        
        private void OnTansferCabOperationCompleted(object arg) {
            if ((this.TansferCabCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TansferCabCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/CancelReportOrderOp", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelReportOrderOp(int orderOpReportId, string userCode) {
            this.Invoke("CancelReportOrderOp", new object[] {
                        orderOpReportId,
                        userCode});
        }
        
        /// <remarks/>
        public void CancelReportOrderOpAsync(int orderOpReportId, string userCode) {
            this.CancelReportOrderOpAsync(orderOpReportId, userCode, null);
        }
        
        /// <remarks/>
        public void CancelReportOrderOpAsync(int orderOpReportId, string userCode, object userState) {
            if ((this.CancelReportOrderOpOperationCompleted == null)) {
                this.CancelReportOrderOpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelReportOrderOpOperationCompleted);
            }
            this.InvokeAsync("CancelReportOrderOp", new object[] {
                        orderOpReportId,
                        userCode}, this.CancelReportOrderOpOperationCompleted, userState);
        }
        
        private void OnCancelReportOrderOpOperationCompleted(object arg) {
            if ((this.CancelReportOrderOpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelReportOrderOpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/BackFlushVanOrder", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BackFlushVanOrder(string userCode) {
            this.Invoke("BackFlushVanOrder", new object[] {
                        userCode});
        }
        
        /// <remarks/>
        public void BackFlushVanOrderAsync(string userCode) {
            this.BackFlushVanOrderAsync(userCode, null);
        }
        
        /// <remarks/>
        public void BackFlushVanOrderAsync(string userCode, object userState) {
            if ((this.BackFlushVanOrderOperationCompleted == null)) {
                this.BackFlushVanOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackFlushVanOrderOperationCompleted);
            }
            this.InvokeAsync("BackFlushVanOrder", new object[] {
                        userCode}, this.BackFlushVanOrderOperationCompleted, userState);
        }
        
        private void OnBackFlushVanOrderOperationCompleted(object arg) {
            if ((this.BackFlushVanOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackFlushVanOrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/RunLeanEngine", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunLeanEngine(string userCode) {
            this.Invoke("RunLeanEngine", new object[] {
                        userCode});
        }
        
        /// <remarks/>
        public void RunLeanEngineAsync(string userCode) {
            this.RunLeanEngineAsync(userCode, null);
        }
        
        /// <remarks/>
        public void RunLeanEngineAsync(string userCode, object userState) {
            if ((this.RunLeanEngineOperationCompleted == null)) {
                this.RunLeanEngineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunLeanEngineOperationCompleted);
            }
            this.InvokeAsync("RunLeanEngine", new object[] {
                        userCode}, this.RunLeanEngineOperationCompleted, userState);
        }
        
        private void OnRunLeanEngineOperationCompleted(object arg) {
            if ((this.RunLeanEngineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunLeanEngineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.Sconit.WebService.OrderService/AutoGenAnDonOrder", RequestNamespace="http://com.Sconit.WebService.OrderService/", ResponseNamespace="http://com.Sconit.WebService.OrderService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AutoGenAnDonOrder(string userCode) {
            this.Invoke("AutoGenAnDonOrder", new object[] {
                        userCode});
        }
        
        /// <remarks/>
        public void AutoGenAnDonOrderAsync(string userCode) {
            this.AutoGenAnDonOrderAsync(userCode, null);
        }
        
        /// <remarks/>
        public void AutoGenAnDonOrderAsync(string userCode, object userState) {
            if ((this.AutoGenAnDonOrderOperationCompleted == null)) {
                this.AutoGenAnDonOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutoGenAnDonOrderOperationCompleted);
            }
            this.InvokeAsync("AutoGenAnDonOrder", new object[] {
                        userCode}, this.AutoGenAnDonOrderOperationCompleted, userState);
        }
        
        private void OnAutoGenAnDonOrderOperationCompleted(object arg) {
            if ((this.AutoGenAnDonOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutoGenAnDonOrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AutoCloseOrderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AutoCloseASNCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OutCabCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TansferCabCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelReportOrderOpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BackFlushVanOrderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RunLeanEngineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AutoGenAnDonOrderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591