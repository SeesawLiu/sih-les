@using com.Sconit.Entity.ORD
@model IEnumerable<OrderItemTrace>
<script type="text/javascript">
    function OrderItemTraceGrid_OnDataBinding(e) {
        e.data = {
            OrderNo: $('#OrderNo').val(),
            OpReference: $('#OpReference').val()
        };
    }

    function OrderItemTraceResultGrid_OnDetailViewCollapse(e) {

    }

    function barCodeOnKeyDown(t) {
        if (event.keyCode == 13) {
            if ($(t).val() == "") {
                $message.error("请扫描条码。");
                return false;
            }
            var id = $(t).parent().parent().children().eq(1).text();
            $.ajax({
                type: 'post',
                dataType: "Json",
                url: "/OrderItemTrace/_NewResult/",
                data: { barCode: $(t).val(), id: id },
                success: function (e) {
                    location.href = '/OrderItemTrace/List/?OrderNo=' + $('#OrderNo').val() + '&OpReference=' + $('#OpReference').val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    DisplayTextMessages(XMLHttpRequest.responseText);
                }
            });
        }
    }

    $(document).ready(function () {
        $("input[name=OrderItemTrace_BarCode]").focus().keydown(function () {
            if (event.keyCode == 13) {
                var self = $(this);
                if (self.val() == "") {
                    $message.error("请扫描条码。");
                    return false;
                }

                $.ajax({
                    type: 'post',
                    dataType: "Json",
                    url: "/OrderItemTrace/_Resolve/",
                    data: {
                        barCode: self.val(),
                        OrderNo: $('#OrderNo').val(),
                        OpReference: $('#OpReference').val()
                    },
                    success: function (e) {
                        location.href = '/OrderItemTrace/List/?OrderNo=' + $('#OrderNo').val() + '&OpReference=' + $('#OpReference').val();
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        DisplayTextMessages(XMLHttpRequest.responseText);
                    }
                });
            }
        });
    });
</script>
<fieldset>
    <div class="editor">
        <div class="editor-label-2">
            @Html.Label(@Resources.ORD.OrderItemTrace.OrderItemTrace_BarCode)
        </div>
        <div class="editor-field-2">
            @if (ViewBag.ReadOnly)
            {
                @Html.TextBox("OrderItemTrace_BarCode", string.Empty, new { disabled = ViewBag.ReadOnly })
            }
            else
            {
                @Html.TextBox("OrderItemTrace_BarCode")
            }
        </div>
    </div>
</fieldset>
<fieldset>
    @(Html.Telerik().Grid(Model)
                        .Name("OrderItemTraceGrid")
        .DataKeys(keys =>
        {
            keys.Add(p => p.Id);
        })
        .Editable(editing => editing.Mode(GridEditMode.InCell))
        .Columns(columns =>
        {
            columns.Bound(o => o.Id).Hidden();
            columns.Bound(o => o.OrderNo).ReadOnly();
            columns.Bound(o => o.Item).ReadOnly();
            columns.Bound(o => o.OpReference).ReadOnly();
            columns.Bound(o => o.Qty).ReadOnly();
            // columns.Bound(o => o.BarCode).Width(200).Sortable(false);
        })
        .DetailView(details => details.ClientTemplate(
                    Html.Telerik().Grid<OrderItemTraceResult>()
                        .Name("OrderItemTraceResult<#= Id #>")
                .Columns(columns =>
                {
                    columns.Bound(o => o.BarCode);
                    columns.Bound(o => o.Supplier);
                    columns.Bound(o => o.LotNo);
                })
                .DataBinding(dataBinding => dataBinding.Ajax()
                        .Select("_OrderItemTraceResultAjax", "OrderItemTrace", new { orderItemTraceId = "<#= Id #>" }))
                .Footer(false)
                .Resizable(resizing => resizing.Columns(true))
                .ToHtmlString()
    ))
            .CellAction(cell =>
                            {
                                if (cell.Column.Member == "Id")
                                {
                                    cell.Text = string.Format("<input type='text' id='Id_<#= '" + cell.DataItem.Id + "'#>' name='Id' style='display:none' value='" + cell.DataItem.Id + "'/>");
                                }
                                if (cell.Column.Member == "BarCode")
                                {
                                    cell.Text = string.Format("<input type='text' name='BarCode' style='width:160px' onkeydown='barCodeOnKeyDown(this)'  />");
                                }
                            })
                .Scrollable(c => c.Enabled(false))
                .DataBinding(dataBinding => dataBinding.Ajax().Select("_AjaxList", "OrderItemTrace"))
                                .ClientEvents(events => events.OnDataBinding("OrderItemTraceGrid_OnDataBinding"))
                .Pageable(settings =>
                {
                    settings.Total(ViewBag.Total != null ? ViewBag.Total : 0);
                    settings.PageSize((ViewBag.PageSize != null ? ViewBag.PageSize : 1));
                })
                .EnableCustomBinding(true)
                .Sortable()
                .Resizable(resizing => resizing.Columns(true))
            )
</fieldset>
